#include<iostream>
#include<conio.h>
#include<windows.h>
using namespace std;

const int width = 40;    
const int height = 25;   

int x, y;                    
int fruitX, fruitY;         
int score;
int tailX[400], tailY[400]; 
int nTail;                  
enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN };
eDirection dir;
bool gameOver;
bool gameStarted;
bool showStartScreen;

void Setup() {
    gameOver = false;
    gameStarted = false;
    dir = STOP;
    x = width / 2;
    y = height / 2;
    fruitX = rand() % (width - 2) + 1;
    fruitY = rand() % (height - 2) + 1;
    score = 0;
    nTail = 0;
}

void HideCursor() {
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO info;
    info.dwSize = 100;
    info.bVisible = FALSE;
    SetConsoleCursorInfo(consoleHandle, &info);
}

void ShowStartScreen() {
    system("cls");
    cout << "\n\n\n";
    cout << "    ********************************\n";
    cout << "    *         SNAKE GAME           *\n";
    cout << "    ********************************\n";
    cout << "\n\n";
    cout << "    Controls:\n";
    cout << "    W - Move Up\n";
    cout << "    S - Move Down\n";
    cout << "    A - Move Left\n";
    cout << "    D - Move Right\n";
    cout << "\n";
    cout << "    Press 'S' to Start the Game\n";
    cout << "    Press 'Q' to Quit\n";
}

void Draw() {
    COORD coord;
    coord.X = 0;
    coord.Y = 0;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);

    for (int i = 0; i < width + 2; i++)
        cout << "#";
    cout << endl;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width + 2; j++) {
            if (j == 0 || j == width + 1)
                cout << "#";
            else if (i == y && j == x)
                cout << "O";
            else if (i == fruitY && j == fruitX)
                cout << "F";
            else {
                bool printTail = false;
                for (int k = 0; k < nTail; k++) {
                    if (tailX[k] == j && tailY[k] == i) {
                        cout << "o";
                        printTail = true;
                    }
                }
                if (!printTail)
                    cout << " ";
            }
        }
        cout << endl;
    }

    for (int i = 0; i < width + 2; i++)
        cout << "#";
    cout << endl;

    cout << "Score: " << score << endl;
}

void ShowGameOverScreen() {
    system("cls");
    cout << "\n\n\n";
    cout << "    ********************************\n";
    cout << "    *         GAME OVER!           *\n";
    cout << "    ********************************\n";
    cout << "\n";
    cout << "    Final Score: " << score << "\n\n";
    cout << "    Press 'R' to Restart\n";
    cout << "    Press 'Q' to Quit\n";
}

void Input() {
    if (_kbhit()) {
        switch (tolower(_getch())) {
        case 'w':
            if (gameStarted && dir != DOWN) dir = UP;
            break;
        case 's':
            if (!gameStarted) {
                gameStarted = true;
                dir = RIGHT; 
                system("cls");
            }
            else if (dir != UP) dir = DOWN;
            break;
        case 'a':
            if (gameStarted && dir != RIGHT) dir = LEFT;
            break;
        case 'd':
            if (gameStarted && dir != LEFT) dir = RIGHT;
            break;
        case 'q':
            gameOver = true;
            break;
        }
    }
}

void Logic() {
    if (!gameStarted) return;

    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;

    for (int i = 1; i < nTail; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }

    switch (dir) {
    case LEFT:
        x--;
        break;
    case RIGHT:
        x++;
        break;
    case UP:
        y--;
        break;
    case DOWN:
        y++;
        break;
    }

    if (x >= width || x < 1 || y >= height || y < 1)
        gameOver = true;

    for (int i = 0; i < nTail; i++)
        if (tailX[i] == x && tailY[i] == y)
            gameOver = true;

    if (x == fruitX && y == fruitY) {
        score += 10;
        fruitX = rand() % (width - 2) + 1;
        fruitY = rand() % (height - 2) + 1;
        nTail++;
    }
}

int main() {
    HideCursor();
    bool exitGame = false;
    
    while (!exitGame) {
        Setup();
        showStartScreen = true;
        
        if (showStartScreen) {
            ShowStartScreen();
            showStartScreen = false;
        }
        
        while (!gameOver) {
            if (!gameStarted) {
                if (_kbhit()) {
                    char key = tolower(_getch());
                    if (key == 's') {
                        gameStarted = true;
                        dir = RIGHT; 
                        system("cls");
                    }
                    else if (key == 'q') {
                        gameOver = true;
                        exitGame = true;
                    }
                }
            }
            else {
                Draw();
                Input();
                Logic();
                Sleep(100);
            }
        }

        if (!exitGame) {
            ShowGameOverScreen();
            
            bool validChoice = false;
            while (!validChoice) {
                char choice = tolower(_getch());
                if (choice == 'r') {
                    validChoice = true;
                }
                else if (choice == 'q') {
                    validChoice = true;
                    exitGame = true;
                }
            }
        }
    }

    return 0;
}
